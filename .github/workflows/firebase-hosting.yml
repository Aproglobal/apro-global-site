name: APRO — Build & Deploy (Hosting + Functions)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Build-time env for Vite
      - name: Create .env for build
        run: |
          cat << 'EOF' > .env
          VITE_SALES_EMAIL=${{ secrets.VITE_SALES_EMAIL }}
          VITE_GA_MEASUREMENT_ID=${{ secrets.VITE_GA_MEASUREMENT_ID }}
          VITE_AB_DEFAULT=A
          EOF
          echo ".env file created (values hidden):"
          cat .env | sed 's/=\(.*\)/=[HIDDEN]/'

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build
        run: npm run build

      - name: Verify GA ID replaced
        run: |
          if [ ! -f dist/index.html ]; then
            echo "❌ dist/index.html not found. Is Vite output 'dist'?" && exit 1
          fi
          echo "Checking GA ID in dist/index.html..."
          if grep -q "googletagmanager.com/gtag/js?id=G-" dist/index.html; then
            echo "✅ GA ID found in dist/index.html"
          else
            echo "❌ GA ID NOT found in dist/index.html"; exit 1
          fi

      # Functions: only when email secrets exist
      - name: Sync & Deploy Firebase Functions (only if email secrets exist)
        if: ${{ secrets.SENDGRID_API_KEY != '' && secrets.SALES_TO != '' && secrets.FROM != '' }}
        shell: bash
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          SALES_TO: ${{ secrets.SALES_TO }}
          FROM: ${{ secrets.FROM }}
          SALES_BCC: ${{ secrets.SALES_BCC }}
        run: |
          set -euo pipefail
          export GOOGLE_APPLICATION_CREDENTIALS="$RUNNER_TEMP/gcp.json"
          printf '%s' "$FIREBASE_SERVICE_ACCOUNT" > "$GOOGLE_APPLICATION_CREDENTIALS"
          npm i -g firebase-tools@latest
          sync_secret () {
            local NAME="$1"
            local VAL="$(printenv "$NAME" || true)"
            if [ -n "$VAL" ]; then
              printf "%s" "$VAL" | firebase functions:secrets:set "$NAME" \
                --project "$FIREBASE_PROJECT_ID" --force
              echo "Synced secret: $NAME"
            else
              echo "Skip empty: $NAME"
            fi
          }
          sync_secret SENDGRID_API_KEY
          sync_secret SALES_TO
          sync_secret FROM
          sync_secret SALES_BCC

          pushd functions
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          npm run build
          popd

          firebase deploy --only functions --project "$FIREBASE_PROJECT_ID"

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: live
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
